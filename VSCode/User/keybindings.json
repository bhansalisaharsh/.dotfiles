// Place your key bindings in this file to override the defaults
[
    {
        "key": "ctrl+shift+i",
        "command": "-supermaven.addToChat",
    },
    {
        "key": "alt+i",
        "command": "supermaven.editWithSupermaven",
    },
    {
        "key": "ctrl+i",
        "command": "-supermaven.editWithSupermaven",
    },

  // Vim Navigation
  {
    "key": "ctrl-h",
    "command": "workbench.action.navigateLeft",
  },
  {
    "key": "ctrl-l",
    "command": "workbench.action.navigateRight",
  },
  {
    "key": "ctrl-k",
    "command": "workbench.action.navigateUp",
  },
  {
    "key": "ctrl-j",
    "command": "workbench.action.navigateDown",
  },
  {
    "key": "space ,",
    "command": "workbench.action.showAllEditors",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && (editorTextFocus || !inputFocus)",
  },
  {
    "key": "space e",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.files.action.focusFilesExplorer",
      ]
    },
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && (editorTextFocus || !inputFocus) && !sideBarFocus" 
  },
  {
    "key": "space e",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.action.focusActiveEditorGroup",
      ]
    },
    "when": "sideBarFocus && !inputFocus",
  },
  {
    "key": "space e",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus && foldersViewVisible",
    "command": "workbench.action.toggleSidebarVisibility",
  },
  {
    "key": "s h",
    "command": "workbench.action.splitEditor",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && (editorTextFocus || !inputFocus)",
  },
  {
    "key": "s v",
    "command": "workbench.action.splitEditorDown",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && (editorTextFocus || !inputFocus)",
  },

  // Vim Coding
  {
    "key": "space c a",
    "command": "editor.action.codeAction",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus",
  },
  {
    "key": "shift-k",
    "command": "editor.action.moveLinesUpAction",
    "when": "(neovim.mode == visualline || vim.mode == 'VisualLine') && editorTextFocus",
  },
  {
    "key": "shift-j",
    "command": "editor.action.moveLinesDownAction",
    "when": "(neovim.mode == visualline || vim.mode == 'VisualLine') && editorTextFocus",
  },
  {
    "key": "shift-k",
    "command": "editor.action.showHover",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus",
  },
  {
    "key": "space c r",
    "command": "editor.action.rename",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus",
  },
  {
    "key": "space c s",
    "command": "workbench.action.gotoSymbol",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus",
  },
  {
    "key": "space b d",
    "command": "workbench.action.closeActiveEditor",
    "when": "((neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus) || !inputFocus",
  },
  {
    "key": "space b o",
    "command": "workbench.action.closeOtherEditors",
    "when": "((neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus) || !inputFocus",
  },
  {
    "key": "space space",
    "command": "workbench.action.quickOpen",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && (editorTextFocus || !inputFocus)",
  },
  {
    "key": "space g d",
    "command": "editor.action.revealDefinition",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus",
  },
  {
    "key": "space g r",
    "command": "editor.action.goToReferences",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus",
  },
  {
    "key": "space g i",
    "command": "editor.action.goToImplementation",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus",
  },
  {
    "key": "space s g",
    "command": "workbench.action.findInFiles",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && (editorTextFocus || !inputFocus)",
  },
  {
    "key": "space g g",
    "command": "runCommands",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && (editorTextFocus || !inputFocus)",
    "args": {
      "commands": ["workbench.view.scm", "workbench.scm.focus"]
    }
  },
  {
    "key": "ctrl-n",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "(neovim.mode == normal || neovim.mode == visual || vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)",
  },
  {
    "key": "ctrl+[",
    "command": "extension.vim_escape",
    "when": "(neovim.mode == insert || vim.mode == 'Insert') && (editorTextFocus || !inputFocus) && vim.active && !inDebugRepl",
  },


  // Vim File Explorer
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
  },
  {
    "key": "c",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
  },
  {
    "key": "s",
    "command": "explorer.openToSide",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
  },
  {
    "key": "shift-s",
    "command": "runCommands",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
    "args": {
      "commands": [
        "workbench.action.splitEditorDown",
        "explorer.openAndPassFocus",
        "workbench.action.closeOtherEditors",
      ]
    }
  },
  {
    "key": "enter",
    "command": "explorer.openAndPassFocus",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceIsFolder && !inputFocus",
  },
  {
    "key": "enter",
    "command": "list.toggleExpand",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && explorerResourceIsFolder && !inputFocus",
  },

  // Vim Debug
  {
    "key": "space d a",
    "command": "workbench.action.debug.selectandstart",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && (editorTextFocus || !inputFocus) && debuggersAvailable",
  },
  {
    "key": "space d t",
    "command": "workbench.action.debug.stop",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus && inDebugMode && !focusedSessionIsAttached",
  },
  {
    "key": "space d o",
    "command": "workbench.action.debug.stepOver",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && (editorTextFocus || !inputFocus) && inDebugMode && debugState == 'stopped'",
  },
  {
    "key": "space d b",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus",
  },
  {
    "key": "space d e",
    "command": "editor.debug.action.showDebugHover",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && editorTextFocus && inDebugMode && debugState == 'stopped'",
  },
  {
    "key": "space d c",
    "command": "workbench.action.debug.continue",
    "when": "(neovim.mode == normal || vim.mode == 'Normal') && (editorTextFocus || !inputFocus) && inDebugMode && debugState == 'stopped'",
  }
]